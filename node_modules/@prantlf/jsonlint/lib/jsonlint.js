(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define('jsonlint', ['exports'], factory) :
  (global = global || self, factory(global.jsonlint = {}));
}(this, function (exports) { 'use strict';

/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsonlint = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,13],$V2=[1,14],$V3=[1,9],$V4=[1,10],$V5=[1,11],$V6=[1,15],$V7=[1,16],$V8=[15,19,23,25],$V9=[15,19,22,23,25],$Va=[19,23],$Vb=[23,25];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"JSONString":3,"STRING":4,"SINGLEQUOTED_STRING":5,"JSONNumber":6,"NUMBER":7,"JSONNullLiteral":8,"NULL":9,"JSONBooleanLiteral":10,"TRUE":11,"FALSE":12,"JSONText":13,"JSONValue":14,"EOF":15,"JSONObject":16,"JSONArray":17,"{":18,"}":19,"JSONMemberList":20,"JSONMember":21,":":22,",":23,"[":24,"]":25,"JSONElementList":26,"$accept":0,"$end":1},
terminals_: {2:"error",4:"STRING",5:"SINGLEQUOTED_STRING",7:"NUMBER",9:"NULL",11:"TRUE",12:"FALSE",15:"EOF",18:"{",19:"}",22:":",23:",",24:"[",25:"]"},
productions_: [0,[3,1],[3,1],[6,1],[8,1],[10,1],[10,1],[13,2],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[16,2],[16,3],[21,3],[20,1],[20,3],[17,2],[17,3],[26,1],[26,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 // replace escaped characters with actual character
          this.$ = yytext.replace(/\\(\\|")/g, "$"+"1")
                     .replace(/\\n/g,'\n')
                     .replace(/\\r/g,'\r')
                     .replace(/\\t/g,'\t')
                     .replace(/\\v/g,'\v')
                     .replace(/\\f/g,'\f')
                     .replace(/\\b/g,'\b');
        
break;
case 2:
 // replace escaped characters with actual character
          this.$ = yytext.replace(/\\(\\|')/g, "$"+"1")
                     .replace(/\\n/g,'\n')
                     .replace(/\\r/g,'\r')
                     .replace(/\\t/g,'\t')
                     .replace(/\\v/g,'\v')
                     .replace(/\\f/g,'\f')
                     .replace(/\\b/g,'\b');
        
break;
case 3:
this.$ = Number(yytext);
break;
case 4:
this.$ = null;
break;
case 5:
this.$ = true;
break;
case 6:
this.$ = false;
break;
case 7:
return this.$ = $$[$0-1];
break;
case 14:
this.$ = {};
break;
case 15: case 20:
this.$ = $$[$0-1];
break;
case 16:
this.$ = [$$[$0-2], $$[$0]];
break;
case 17:
this.$ = {}; this.$[$$[$0][0]] = $$[$0][1];
break;
case 18:
this.$ = $$[$0-2]; $$[$0-2][$$[$0][0]] = $$[$0][1];
break;
case 19:
this.$ = [];
break;
case 21:
this.$ = [$$[$0]];
break;
case 22:
this.$ = $$[$0-2]; $$[$0-2].push($$[$0]);
break;
}
},
table: [{3:5,4:$V0,5:$V1,6:6,7:$V2,8:3,9:$V3,10:4,11:$V4,12:$V5,13:1,14:2,16:7,17:8,18:$V6,24:$V7},{1:[3]},{15:[1,17]},o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),o($V8,[2,11]),o($V8,[2,12]),o($V8,[2,13]),o($V8,[2,4]),o($V8,[2,5]),o($V8,[2,6]),o($V9,[2,1]),o($V9,[2,2]),o($V8,[2,3]),{3:21,4:$V0,5:$V1,19:[1,18],20:19,21:20},{3:5,4:$V0,5:$V1,6:6,7:$V2,8:3,9:$V3,10:4,11:$V4,12:$V5,14:24,16:7,17:8,18:$V6,24:$V7,25:[1,22],26:23},{1:[2,7]},o($V8,[2,14]),{19:[1,25],23:[1,26]},o($Va,[2,17]),{22:[1,27]},o($V8,[2,19]),{23:[1,29],25:[1,28]},o($Vb,[2,21]),o($V8,[2,15]),{3:21,4:$V0,5:$V1,21:30},{3:5,4:$V0,5:$V1,6:6,7:$V2,8:3,9:$V3,10:4,11:$V4,12:$V5,14:31,16:7,17:8,18:$V6,24:$V7},o($V8,[2,20]),{3:5,4:$V0,5:$V1,6:6,7:$V2,8:3,9:$V3,10:4,11:$V4,12:$V5,14:32,16:7,17:8,18:$V6,24:$V7},o($Va,[2,18]),o($Va,[2,16]),o($Vb,[2,22])],
defaultActions: {17:[2,7]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
  function fail (reason, token) {
    var lexer = yy.lexer
    var message = 'Parse error on line ' + yy_.yylineno + ':'
      + (lexer.showPosition ? '\n' + lexer.showPosition() + '\n' : ' ')
      + reason
    this.parseError(message, {
      text: yy_.yytext, token: token, line: yy_.yylineno, loc: yy_.yylloc
    })
  }

  function string (token) {
    yy_.yytext = yy_.yytext.substr(1, yy_.yyleng - 2)
    return token
  }

  // Workaround for a wrong value in yy_.yy_.yylloc. lexer.yy_.yylloc is correct.
  if (yy.parseError) {
    yy.parseError.yy = yy.lexer
  }

  yy.comment = function () {
    if (!yy.ignoreComments) {
      fail.call(this, 'Unexpected comment', 'COMMENT')
    }
  }

  yy.string = function () {
    return string('STRING')
  }

  yy.singleQuotedString = function () {
    if (yy.allowSingleQuotedStrings) {
      return string('SINGLEQUOTED_STRING')
    }
    fail.call(this, 'Unexpected single-quoted string', 'SINGLEQUOTED_STRING')
  }

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:yy.comment.call(this)
break;
case 2:yy.comment.call(this)
break;
case 3:return 7
break;
case 4:return yy.string.call(this)
break;
case 5:return yy.singleQuotedString.call(this)
break;
case 6:return 18
break;
case 7:return 19
break;
case 8:return 24
break;
case 9:return 25
break;
case 10:return 23
break;
case 11:return 22
break;
case 12:return 11
break;
case 13:return 12
break;
case 14:return 9
break;
case 15:return 15
break;
case 16:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:\/\/.*)/,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/,/^(?:(-?([0-9]|[1-9][0-9]+))(\.[0-9]+)?([eE][-+]?[0-9]+)?\b)/,/^(?:"(?:\\[\\"bfnrt\/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f"])*")/,/^(?:'(?:\\[\\'bfnrt\/]|\\u[a-fA-F0-9]{4}|[^\\\0-\x09\x0a-\x1f'])*')/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?::)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

function getLineAndColumn (input, offset) {
  var lines = input
    .substr(0, offset)
    .split(/\r?\n/)
  var line = lines.length
  var column = lines[line - 1].length + 1
  return {
    line: line,
    column: column
  }
}

function pastInput (input, offset) {
  var start = Math.max(0, offset - 20)
  var previous = input.substr(start, offset - start)
  return (offset > 20 ? '...' : '') + previous.replace(/\n/g, '')
}

function upcomingInput (input, offset) {
  var start = Math.max(0, offset - 20)
  start += offset - start
  var rest = input.length - start
  var next = input.substr(start, Math.min(20, rest))
  return next.replace(/\n/g, '') + (rest > 20 ? '...' : '')
}

function getPositionContext (input, offset) {
  var past = pastInput(input, offset)
  var upcoming = upcomingInput(input, offset)
  var pointer = new Array(past.length + 1).join('-') + '^'
  return {
    exzerpt: past + upcoming,
    pointer: pointer
  }
}

function improveNativeError (input, error) {
  var message = error.message
  var match = / in JSON at position (\d+)$/.exec(message)
  var offset
  if (match) {
    offset = +match[1]
    message = message.substr(0, match.index)
  } else {
    offset = input.length
  }
  var location = getLineAndColumn(input, offset)
  var line = location.line
  var column = location.column
  location = 'line ' + line + ', column ' + column
  var position = getPositionContext(input, offset)
  var exzerpt = position.exzerpt
  var pointer = position.pointer
  error.message = 'Parse error on ' + location + ':\n' +
    exzerpt + '\n' + pointer + '\n' + message
  error.reason = message
  error.exzerpt = exzerpt
  error.pointer = pointer
  error.location = {
    start: {
      column: column,
      line: line,
      offset: offset
    }
  }
  return error
}

function parseNatively (input) { // eslint-disable-line no-unused-vars
  try {
    return JSON.parse(input)
  } catch (error) {
    throw improveNativeError(input, error)
  }
}

function needsCustomParser () { // eslint-disable-line no-unused-vars
  var yy = this.yy
  return yy.ignoreComments || yy.allowSingleQuotedStrings ||
    yy.limitedErrorInfo !== true
}

function getOffset (input, line, column) {
  if (line > 1) {
    var breaks = /\r?\n/g
    var match
    while (match = breaks.exec(input)) { // eslint-disable-line no-cond-assign
      if (--line === 1) {
        return match.index + column
      }
    }
  }
  return column - 1
}

function improveCustomError (input, error) {
  var location = error.hash.loc
  var line = location.first_line
  var column = location.first_column
  var offset = getOffset(input, line, column)
  var lines = error.message.split(/\r?\n/)
  error.reason = lines[3]
  error.exzerpt = lines[2]
  error.pointer = lines[1]
  error.location = {
    start: {
      line: line,
      column: column,
      offset: offset
    }
  }
  return error
}

function parseCustom (parse, input) { // eslint-disable-line no-unused-vars
  if (this.yy.limitedErrorInfo) {
    try {
      return parse.call(this, input)
    } catch (error) {
      throw improveCustomError(input, error)
    }
  } else {
    return parse.call(this, input)
  }
}

/* globals jsonlint, needsCustomParser, parseCustom, parseNatively */

var Parser = jsonlint.Parser

function ConfigurableParser (options) {
  Parser.prototype.constructor.call(this)
  processOptions.call(this, options)
}

function parse (input, options) {
  var changed = processOptions.call(this, options)
  try {
    return needsCustomParser.call(this)
      ? parseCustom.call(this, Parser.prototype.parse, input)
      : parseNatively(input)
  } finally {
    restoreContext.call(this, changed)
  }
}

function processOptions (options) {
  if (options) {
    var changed = {}
    if (options.ignoreComments !== undefined) {
      changed.ignoreComments = this.yy.ignoreComments
      this.yy.ignoreComments = options.ignoreComments
    }
    if (options.allowSingleQuotedStrings !== undefined) {
      changed.allowSingleQuotedStrings = this.yy.allowSingleQuotedStrings
      this.yy.allowSingleQuotedStrings = options.allowSingleQuotedStrings
    }
    if (options.limitedErrorInfo !== undefined) {
      changed.limitedErrorInfo = this.yy.limitedErrorInfo
      this.yy.limitedErrorInfo = options.limitedErrorInfo
    }
    return changed
  }
}

function restoreContext (changed) {
  if (changed) {
    var yy = this.yy
    for (var option in changed) {
      var value = changed[option]
      if (value === undefined) {
        delete yy[option]
      } else {
        yy[option] = value
      }
    }
  }
}

ConfigurableParser.prototype = Object.create(Parser.prototype)
ConfigurableParser.prototype.constructor = ConfigurableParser
ConfigurableParser.prototype.parse = parse
ConfigurableParser.prototype.Parser = ConfigurableParser

jsonlint = new ConfigurableParser() // eslint-disable-line no-global-assign

  exports.parser = jsonlint;
  exports.Parser = jsonlint.Parser;
  exports.parse = jsonlint.parse.bind(jsonlint)

  Object.defineProperty(exports, '__esModule', { value: true });
}));
