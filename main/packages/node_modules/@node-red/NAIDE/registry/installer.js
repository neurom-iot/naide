const fs = require('fs');
const path = require('path');
const runtime = require('@node-red/runtime');
const registry = require('@node-red/registry');

function init() {
    setHttpAdmin();
}

function setHttpAdmin() {
    runtime.httpAdmin.get("/naide/components/modules", function(req, res) {
        var modules = getComponents();
        res.send(modules);
    });
    runtime.httpAdmin.get("/naide/components/install", function(req, res) {
        var install = getComponents(false);
        res.send(install);
    });


    runtime.httpAdmin.post("/naide/components/mgr/delete", function(req, res) {
        var moduleName = req.body.module;
        registry.uninstallModule(moduleName).then(function(info) {
            res.send({reload: true});
        }).catch(function(err) {
            console.log(err);
            res.send({err: err.toString()});
        });
    });

    runtime.httpAdmin.post("/naide/components/mgr/codedelete", function(req, res) {
        var moduleName = req.body.module;
        var modulePath = req.body.path;
        registry.uninstallModule(moduleName).then(function(info) {
            res.send({reinstall: true, module: moduleName, path: modulePath});
        }).catch(function(err) {
            console.log(err);
            res.send({err: err.toString()});
        });
    });

    runtime.httpAdmin.post("/naide/components/mgr/install", function(req, res) {
        var moduleName = req.body.module;
        var moduleVersion = req.body.version;
        var modulePath = req.body.path;
        registry.installModule(modulePath, "", moduleName).then(function(info) {
            res.send({reload: true});
        }).catch(function(err) {
            console.log(err);
            res.send({err: err.toString()});
        });
    });
    
}

function getComponents(installed = true) {
    var components = {};
    var installList = registry.getModuleList();
    components.modules = [];
    var dirs = fs.readdirSync("na-components");
    for(var i = 0; i < dirs.length; i++) {
        if (fs.existsSync("na-components/" + dirs[i] + "/package.json")) {
            let json = JSON.parse(fs.readFileSync("na-components/" + dirs[i] + "/package.json"));
            if (installed && Object.keys(installList).includes(json.name)) {
                if (fs.existsSync("na-components/" + dirs[i] + "/codeEditor/package.json")) {
                    let json2 = JSON.parse(fs.readFileSync("na-components/" + dirs[i] + "/codeEditor/package.json"));
                    //console.log(installList[json2.name].version);
                    if (!installList[json2.name].version.includes('c')) {
                        components.modules.push({code: true, name: json2.name, version: json2.version.replace('c', ''), path: process.cwd() + "\\na-components\\" + dirs[i] + "\\codeEditor"});
                        continue;
                    }
                    else {
                        components.modules.push({name: json2.name, version: json2.version, path: process.cwd() + "\\na-components\\" + dirs[i]});
                    }
                }
                else {
                    components.modules.push({name: json.name, version: json.version, path: process.cwd() + "\\na-components\\" + dirs[i]});
                }
            }
            else if (!installed && !Object.keys(installList).includes(json.name)) {
                components.modules.push({name: json.name, version: json.version, path: process.cwd() + "\\na-components\\" + dirs[i]});
            }
        }
    }
    return components;
}

module.exports = {
    init: init
}