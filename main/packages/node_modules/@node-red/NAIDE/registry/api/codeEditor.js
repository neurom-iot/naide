
/**
 * @author K9714
 * @date 20. 11. 18
 */
const vm = require('vm');
const spawn = require('child_process').spawn;
var util = require("@node-red/util");

var funcTextBegin = "var result = null;\n" + 
                    "var callSpawn = function(type, callback, path, args) {\n" +
                        "this.spawnFunc(type, callback, path, args)\n" +
                    "};\n" +
                    "result = (function(component, msg, send) {\n" + 
                    "";
var funcTextEnd =   "\n})(component, msg, send);";

var sandbox = {
    console: console,
    RED: {
        util: util
    },
    Buffer: Buffer,
    Date: Date,
    Math: Math
};

class CodeEditor {
    constructor(comp, _config) {
        this.comp = comp; 
        this.funcText = funcTextBegin + _config.codeText + funcTextEnd;
        this.sandbox = typeof(_config.sandbox) === "undefined" ? sandbox : _config.sandbox;
        this.callbackFunc = typeof(_config.callbackFunc) === "undefined" ? null : _config.callbackFunc;
        // sandbox API
        this.sandbox.spawnFunc = this.callSpawn;
        this.sandbox.component = {
            id: comp.id,
            name: comp.name,
            send: this.sendFunc
        }
        this.context = vm.createContext(this.sandbox);
        this.context.basePath = typeof(_config.basePath) === "undefined" ? "na-components/" : _config.basePath; 
    }

    sendFunc(msg, send) {
        send(msg);
    }

    resultFunc(context) {
        if (this.callbackFunc === null) {
            context.msg.payload = context.result;
            this.sendFunc(context.msg, context.send, context.done);
        }
        else {
            this.callbackFunc(context);
        }
    }


    run(msg, send, done) {
        try {
            this.context.msg = msg;
            this.context.send = send;
            this.context.done = done;
            vm.runInContext(this.funcText, this.context);
            this.resultFunc(this.context);
            done();
        }
        catch (err) {
            if ((typeof err === "object") && err.hasOwnProperty("stack")) {
                //remove unwanted part
                var index = err.stack.search(/\n\s*at ContextifyScript.Script.runInContext/);
                err.stack = err.stack.slice(0, index).split('\n').slice(0,-1).join('\n');
                var stack = err.stack.split(/\r?\n/);

                //store the error in msg to be used in flows
                msg.error = err;

                var line = 0;
                var errorMessage;
                if (stack.length > 0) {
                    while (line < stack.length && stack[line].indexOf("ReferenceError") !== 0) {
                        line++;
                    }

                    if (line < stack.length) {
                        errorMessage = stack[line];
                        var m = /:(\d+):(\d+)$/.exec(stack[line+1]);
                        if (m) {
                            var lineno = Number(m[1])-1;
                            var cha = m[2];
                            errorMessage += " (line "+lineno+", col "+cha+")";
                        }
                    }
                }
                if (!errorMessage) {
                    errorMessage = err.toString();
                }
                done(errorMessage);
            }
            else if (typeof err === "string") {
                done(err);
            }
            else {
                done(JSON.stringify(err));
            }
        }
    }

    // Sandbox Function
    callSpawn(type, callback, path, args) {
        var arg = [];
        arg.push(this.basePath + path)
        for (var i = 0; i < args.length; i++) {
            arg.push(args[i]);
        }
        var that = this;
        var spawnProcess = spawn(type, arg);
        spawnProcess.stdout.on('data', function(data) {
            try {
                callback(Buffer.from(data, 'utf-8').toString());
            }
            catch (err) {
                that.done("TextEditor Error ! - " + err.toString());
            }
        });
    }
}


function init(comp, config) {
    var editor = new CodeEditor(comp, config);
    return editor;
}

module.exports = {
    init: init
}