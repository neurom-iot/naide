/*=====================================================
    Title.   Terminal : server.js
    ------------------------------------------
    Author.  K9714 (kskim.hci@gmail.com)
    Date.    2019. 10. 28
    ------------------------------------------
    Desc.
        Xterm 서버를 켜고 동작하는 부분입니다.
        모든 요청은 'data' event-id 로 처리됩니다.
=====================================================*/
var server = {};

// Socket 통신을 위한 모듈 정의
var os = require('os');
var pty = require('node-pty');
var express = require('express');
var app = express();
var httpserver = require('http').createServer(app);
var io = require('socket.io')(httpserver);

// 터미널 서버가 동작할 포트 지정 (Default : 3000)
// 해당 포트 수정시 index.mst 수정 필요
var serverPort = 3000;

// 다른 곳에서 require - run() 호출 시 작동하도록 설계
server.run = function() {
    // 사용할 기본 shell 정의
    var cmd = 'cmd.exe';
    var shell = os.platform() == "win32" ? cmd : 'bash';
    // 클라이언트에서 기본 소스 요청시 index.html 전송
    app.get('/', function(req, res){
        res.sendFile(__dirname + "/index.html");
    });
    // 클라이언트에서 /xterm 경로의 소스 요청권한 허용
    app.use('/xterm', express.static(__dirname + "/xterm"));
    // 클라이언트에서 /debug 경로의 소스 요청권한 허용
    app.use('/debug', express.static(__dirname + "/debug"));
    // 클라이언트의 연결 요청 완료시 발생 이벤트 
    io.on('connection', function(socket){
        // 추가 터미널 프로세스 실행
        var Terminal = pty.spawn(shell, ['/k'], {
            name: 'xterm-color',
            cwd: process.env.HOME,
            env: process.env
        });
        Terminal.write("cd " + __dirname + ' \r\n');
        // 클라이언트 -> 서버 데이터 수신 이벤트
        // recv가 string 형태가 아닌 경우 무시
        // recv / send 의 모든 이벤트는 'data' 로 정의함. 변경 및 추가 가능함
        // 추후 보안에 대비하여 제한된 인증 절차를 거치도록 변경 가능
        socket.on('data', function(recv){
            // string 형태의 경우 터미널에 해당 글자 쓰기
            if (typeof(recv) == "string")
                Terminal.write(recv);
        });
        // 터미널에 글자를 쓰거나, 커맨드 입력에 대한 반응 이벤트
        Terminal.on('data', function(data){
            // data는 추가로 표시될 콘솔 string 넘어옴
            // 해당 string을 클라이언트(socket)로 전송
            socket.emit('data', data);
        });
    });
    // HTTP 서버를 설정한 포트로 실행
    httpserver.listen(serverPort, function(){
        console.log("==========================================================");
        console.log(" Terminal Server listening on port " + serverPort + "!");
        console.log("==========================================================");
    });
};

module.exports = server;